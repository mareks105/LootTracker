/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package loottracker;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.swing.ComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mege9
 */
public class NewRunUI extends javax.swing.JFrame {

    private LootTracker lootTracker;
    private LootTrackerUI mainUI;
    private InventoryParser inventoryParser;
    
    /**
     * Creates new form NewRunUI
     * @param lootTracker The BackEnd Data handler
     */
    public NewRunUI(LootTracker lootTracker, LootTrackerUI mainUI) {
        this.lootTracker = lootTracker;
        this.mainUI = mainUI;
        this.inventoryParser = new InventoryParser();
        UtilitiesUI.showFrameOnScreen(this, 2);
        initComponents();
        setupUserInterface();
    }
    
    private void setupUserInterface(){
        ComboBoxModel<String> comboBoxModel = this.mainUI.getGroupSelector().getModel();
        for(int i = 0; i < comboBoxModel.getSize(); i++){
            this.mobSelector.addItem(comboBoxModel.getElementAt(i));
        }
        UtilitiesUI.addRightClickDeselect(lootTable);
        UtilitiesUI.addRightClickDeselect(equipmentTable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        contentPanel = new javax.swing.JPanel();
        leftPanel = new javax.swing.JPanel();
        ammoPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ammoField = new javax.swing.JTextField();
        mobSelector = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        newMobButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        universalAmmoField = new javax.swing.JTextField();
        equipmentPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        equipmentTable = new javax.swing.JTable();
        addEquipButton = new javax.swing.JButton();
        removeEquipButton = new javax.swing.JButton();
        saveEquipButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        lootPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lootTable = new javax.swing.JTable();
        addLootButton = new javax.swing.JButton();
        removeLootButton = new javax.swing.JButton();
        editLootButton = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        saveRunButton = new javax.swing.JButton();
        endRunButton = new javax.swing.JButton();
        rightPanel = new javax.swing.JPanel();
        beforePanel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        inventoryBeforeField = new javax.swing.JTextArea();
        afterPanel = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        inventoryAfterField = new javax.swing.JTextArea();
        notePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        noteField = new javax.swing.JTextArea();
        updateRunButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                actionOnWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Ammo");

        mobSelector.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Mob");

        newMobButton.setText("New Mob");
        newMobButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMobButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Universal Ammo");

        javax.swing.GroupLayout ammoPanelLayout = new javax.swing.GroupLayout(ammoPanel);
        ammoPanel.setLayout(ammoPanelLayout);
        ammoPanelLayout.setHorizontalGroup(
            ammoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ammoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ammoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ammoField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(28, 28, 28)
                .addGroup(ammoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(universalAmmoField, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mobSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newMobButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ammoPanelLayout.setVerticalGroup(
            ammoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ammoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ammoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mobSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(newMobButton))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(ammoPanelLayout.createSequentialGroup()
                .addGroup(ammoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ammoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ammoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(universalAmmoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        equipmentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(), "Equipment", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        equipmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Type", "start TT", "End TT", "Markup"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        equipmentTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(equipmentTable);
        if (equipmentTable.getColumnModel().getColumnCount() > 0) {
            equipmentTable.getColumnModel().getColumn(1).setMinWidth(100);
            equipmentTable.getColumnModel().getColumn(1).setMaxWidth(150);
            equipmentTable.getColumnModel().getColumn(2).setMinWidth(50);
            equipmentTable.getColumnModel().getColumn(2).setMaxWidth(60);
            equipmentTable.getColumnModel().getColumn(3).setMaxWidth(60);
            equipmentTable.getColumnModel().getColumn(4).setMaxWidth(60);
        }

        addEquipButton.setText("Add");
        addEquipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEquipButtonActionPerformed(evt);
            }
        });

        removeEquipButton.setText("Remove");
        removeEquipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeEquipButtonActionPerformed(evt);
            }
        });

        saveEquipButton.setText("Save");
        saveEquipButton.setEnabled(false);

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout equipmentPanelLayout = new javax.swing.GroupLayout(equipmentPanel);
        equipmentPanel.setLayout(equipmentPanelLayout);
        equipmentPanelLayout.setHorizontalGroup(
            equipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(equipmentPanelLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(addEquipButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeEquipButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveEquipButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(equipmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        equipmentPanelLayout.setVerticalGroup(
            equipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, equipmentPanelLayout.createSequentialGroup()
                .addGroup(equipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addEquipButton)
                    .addComponent(removeEquipButton)
                    .addComponent(saveEquipButton)
                    .addComponent(editButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        lootPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(), "Loot", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        lootTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "TT", "Markup"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        lootTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        jScrollPane3.setViewportView(lootTable);
        if (lootTable.getColumnModel().getColumnCount() > 0) {
            lootTable.getColumnModel().getColumn(1).setMaxWidth(200);
            lootTable.getColumnModel().getColumn(2).setMaxWidth(200);
        }

        addLootButton.setText("Add");
        addLootButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLootButtonActionPerformed(evt);
            }
        });

        removeLootButton.setText("Remove");
        removeLootButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeLootButtonActionPerformed(evt);
            }
        });

        editLootButton.setText("Edit");
        editLootButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editLootButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout lootPanelLayout = new javax.swing.GroupLayout(lootPanel);
        lootPanel.setLayout(lootPanelLayout);
        lootPanelLayout.setHorizontalGroup(
            lootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lootPanelLayout.createSequentialGroup()
                .addGroup(lootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lootPanelLayout.createSequentialGroup()
                        .addComponent(addLootButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editLootButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeLootButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        lootPanelLayout.setVerticalGroup(
            lootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lootPanelLayout.createSequentialGroup()
                .addGroup(lootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addLootButton)
                    .addComponent(editLootButton)
                    .addComponent(removeLootButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addContainerGap())
        );

        saveRunButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        saveRunButton.setText("Save Run");
        saveRunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveRunButtonActionPerformed(evt);
            }
        });

        endRunButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        endRunButton.setText("End Run");
        endRunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endRunButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(saveRunButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(endRunButton, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(80, Short.MAX_VALUE))
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveRunButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endRunButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(equipmentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lootPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ammoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 41, Short.MAX_VALUE)))
                .addContainerGap())
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ammoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(equipmentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lootPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        beforePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(), "Inventory Before Run", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        inventoryBeforeField.setColumns(20);
        inventoryBeforeField.setRows(5);
        jScrollPane7.setViewportView(inventoryBeforeField);

        javax.swing.GroupLayout beforePanelLayout = new javax.swing.GroupLayout(beforePanel);
        beforePanel.setLayout(beforePanelLayout);
        beforePanelLayout.setHorizontalGroup(
            beforePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(beforePanelLayout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
                .addContainerGap())
        );
        beforePanelLayout.setVerticalGroup(
            beforePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
        );

        afterPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(), "Inventory After Run", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        inventoryAfterField.setColumns(20);
        inventoryAfterField.setRows(5);
        jScrollPane6.setViewportView(inventoryAfterField);

        javax.swing.GroupLayout afterPanelLayout = new javax.swing.GroupLayout(afterPanel);
        afterPanel.setLayout(afterPanelLayout);
        afterPanelLayout.setHorizontalGroup(
            afterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(afterPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane6)
                .addContainerGap())
        );
        afterPanelLayout.setVerticalGroup(
            afterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
        );

        notePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(), "Note", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        noteField.setColumns(20);
        noteField.setRows(5);
        jScrollPane2.setViewportView(noteField);

        javax.swing.GroupLayout notePanelLayout = new javax.swing.GroupLayout(notePanel);
        notePanel.setLayout(notePanelLayout);
        notePanelLayout.setHorizontalGroup(
            notePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(notePanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        notePanelLayout.setVerticalGroup(
            notePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(notePanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        updateRunButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        updateRunButton.setText("Update Run");
        updateRunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateRunButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(updateRunButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(beforePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(afterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(notePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(112, Short.MAX_VALUE))
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(beforePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(afterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updateRunButton, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(notePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout contentPanelLayout = new javax.swing.GroupLayout(contentPanel);
        contentPanel.setLayout(contentPanelLayout);
        contentPanelLayout.setHorizontalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addComponent(leftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        contentPanelLayout.setVerticalGroup(
            contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(contentPanelLayout.createSequentialGroup()
                .addComponent(leftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(contentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
        
    
    private void addEquipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEquipButtonActionPerformed
        String[] equipmentInput = EquipmentParser.getEquipmentInput((JFrame)this, lootTracker, null, null, null, null, null);
        if(equipmentInput.length > 0){
            DefaultTableModel model = (DefaultTableModel) equipmentTable.getModel();
            model.addRow(new Object[]{
                equipmentInput[0], 
                equipmentInput[1], 
                equipmentInput[2], 
                equipmentInput[3], 
                equipmentInput[4]}
            );
        }
        
    }//GEN-LAST:event_addEquipButtonActionPerformed

    private void newMobButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMobButtonActionPerformed
        String newMob = JOptionPane.showInputDialog((JFrame)this, "Name of Mob:");
        this.mobSelector.addItem(newMob);
        this.mobSelector.setSelectedItem(newMob);
    }//GEN-LAST:event_newMobButtonActionPerformed
    
    
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        int row = equipmentTable.getSelectedRow();
        if ( row == -1){
            JOptionPane.showMessageDialog((JFrame)this, "No equipment entry selected", "Action Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String[] equipmentInput = EquipmentParser.getEquipmentInput(
                (JFrame)this,
                lootTracker,
                (String)equipmentTable.getValueAt(row, 0),
                (String)equipmentTable.getValueAt(row, 1),
                (String)equipmentTable.getValueAt(row, 2),
                (String)equipmentTable.getValueAt(row, 3),
                (String)equipmentTable.getValueAt(row, 4));
        if(equipmentInput.length > 0){
            DefaultTableModel model = (DefaultTableModel) equipmentTable.getModel();
            model.setValueAt(equipmentInput[0], row, 0);
            model.setValueAt(equipmentInput[1], row, 1);
            model.setValueAt(equipmentInput[2], row, 2);
            model.setValueAt(equipmentInput[3], row, 3);
            model.setValueAt(equipmentInput[4], row, 4);
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void removeEquipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeEquipButtonActionPerformed
        int row = equipmentTable.getSelectedRow();
        if ( row == -1){
            JOptionPane.showMessageDialog((JFrame)this, "No equipment entry selected", "Action Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel)equipmentTable.getModel();
        model.removeRow(row);
    }//GEN-LAST:event_removeEquipButtonActionPerformed

    private void addLootButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLootButtonActionPerformed
        String[] lootInput;
        ArrayList<String> reportedLootForRun = new ArrayList<String>();
        DefaultTableModel model = (DefaultTableModel)this.lootTable.getModel();
        Vector<Vector<String>> lootData = model.getDataVector();
        lootData.forEach((Vector<String> rowData) -> {
            reportedLootForRun.add(rowData.elementAt(0));
        });
        if(this.mobSelector.getItemCount() == 0){
            lootInput = LootParser.getLootInput((JFrame)this, reportedLootForRun, null, null);
        }
        else{
            ArrayList<String> reportedGroup = this.lootTracker.getReportedLootForGroup(this.mobSelector.getSelectedItem().toString());
            reportedGroup.forEach((String s) -> {
                if(! reportedLootForRun.contains(s)){
                    reportedLootForRun.add(s);
                }
            });
            lootInput = LootParser.getLootInput(
                    (JFrame)this,
                    reportedLootForRun,
                null, null);
        }
        
        
        if(lootInput.length > 0){
            String name = lootInput[0];
            String value = lootInput[1];
            String[] markupData = new String[2];
            try{
                markupData[1] = Double.toString(this.lootTracker.getMarkupHandler().getMarkup(name) * 100);
                markupData[0] = name;
            }
            catch(MarkupHandlerException e){
                markupData = MarkupParser.getMarkupInput((JFrame)this, name, null);
                this.lootTracker.getMarkupHandler().addMarkup(name, Double.parseDouble(markupData[1]) / 100);
            }
            model.addRow(new Object[]{
            name,
            value,
            markupData[1]});
            
        }
        
    }//GEN-LAST:event_addLootButtonActionPerformed

    private void editLootButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editLootButtonActionPerformed
        int row = lootTable.getSelectedRow();
        if ( row == -1){
            JOptionPane.showMessageDialog((JFrame)this, "No loot entry selected", "Action Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        String[] lootInput;
        ArrayList<String> reportedLootForRun = new ArrayList<String>();
        DefaultTableModel model = (DefaultTableModel)this.lootTable.getModel();
        Vector<Vector<String>> lootData = model.getDataVector();
        lootData.forEach((Vector<String> rowData) -> {
            reportedLootForRun.add(rowData.elementAt(0));
        });
        if(this.mobSelector.getItemCount() == 0){
            lootInput = LootParser.getLootInput(
                    (JFrame)this,
                reportedLootForRun,
                (String)lootTable.getValueAt(row, 0),
                (String)lootTable.getValueAt(row, 1));
        }
        else{
            ArrayList<String> reportedGroup = this.lootTracker.getReportedLootForGroup(this.mobSelector.getSelectedItem().toString());
            reportedGroup.forEach((String s) -> {
                if(! reportedLootForRun.contains(s)){
                    reportedLootForRun.add(s);
                }
            });
            lootInput = LootParser.getLootInput(
                    (JFrame)this,
                reportedLootForRun,
                (String)lootTable.getValueAt(row, 0),
                (String)lootTable.getValueAt(row, 1));
        }
        
        if(lootInput.length > 0){
            model.setValueAt(lootInput[0], row, 0);
            model.setValueAt(lootInput[1], row, 1);
        }
    }//GEN-LAST:event_editLootButtonActionPerformed

    private void removeLootButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeLootButtonActionPerformed
        int row = lootTable.getSelectedRow();
        if ( row == -1){
            JOptionPane.showMessageDialog((JFrame)this, "No loot entry selected", "Action Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        DefaultTableModel model = (DefaultTableModel)lootTable.getModel();
        model.removeRow(row);
    }//GEN-LAST:event_removeLootButtonActionPerformed

    private void saveRunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveRunButtonActionPerformed
        saveDataForHunt(false);
    }//GEN-LAST:event_saveRunButtonActionPerformed

    private void endRunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endRunButtonActionPerformed
        saveDataForHunt(true);
    }//GEN-LAST:event_endRunButtonActionPerformed

    private void actionOnWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_actionOnWindowClosing
        JFrame frame = (JFrame)evt.getComponent();
        if(JOptionPane.showConfirmDialog(frame, 
                "Are you sure? All entered data will be lost", "Confirm Close", JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
            frame.setVisible(false);
        }
    }//GEN-LAST:event_actionOnWindowClosing

    private void updateRunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateRunButtonActionPerformed
        ArrayList<String> inventoryBefore = new ArrayList<>(Arrays.asList(this.inventoryBeforeField.getText().split("\n")));
        ArrayList<String> inventoryAfter = new ArrayList<>(Arrays.asList(this.inventoryAfterField.getText().split("\n")));
        inventoryParser.loadInventory(inventoryBefore, inventoryAfter);
        Map<String, ArrayList<Item>> data = inventoryParser.getInventoryChangesForHunt();
        
        DefaultTableModel lootModel = (DefaultTableModel)this.lootTable.getModel();
        DefaultTableModel equipmentModel = (DefaultTableModel)this.equipmentTable.getModel();
        
        // Equipment
        
        data.get("Decay").forEach((Item decayItem) ->{
            Equipment e = (Equipment)decayItem;
            EquipmentType type;
            double markup;
            int index = this.lootTracker.getAllEquipment().indexOf(e);
            if(index != -1){
                type = this.lootTracker.getAllEquipment().get(index).getType();
                markup = this.lootTracker.getAllEquipment().get(index).getMarkup();
            }
            else{
                type = EquipmentType.UNKNOWN;
                markup = e.getMarkup();
            }
            
            equipmentModel.addRow(new Object[]{
                e.getName(), 
                type,
                Double.toString(e.getValue()), 
                Double.toString(e.getEndValue()),
                Double.toString(markup)}
            );
        });
        
        data.get("Loot").forEach((loot) ->{
            String[] markupData = new String[2];
            try{
                markupData[1] = Double.toString(this.lootTracker.getMarkupHandler().getMarkup(loot.getName()) * 100);
                markupData[0] = loot.getName();
            }
            catch(MarkupHandlerException e){
                markupData = MarkupParser.getMarkupInput((JFrame)this, loot.getName(), null);
                this.lootTracker.getMarkupHandler().addMarkup(loot.getName(), Double.parseDouble(markupData[1]) / 100);
            }
            lootModel.addRow(new Object[]{
            loot.getName(),
            Double.toString(loot.getValue()),
            markupData[1]});
        });
    }//GEN-LAST:event_updateRunButtonActionPerformed
    
    private void saveDataForHunt(boolean end){
        DefaultTableModel equipmentTableModel = (DefaultTableModel)equipmentTable.getModel();
        Vector<Vector<String>> equipmentData = equipmentTableModel.getDataVector();
        DefaultTableModel lootTableModel = (DefaultTableModel)lootTable.getModel();
        Vector<Vector<String>> lootData = lootTableModel.getDataVector();
        double ammo;
        double universalAmmo;
        String group;
        boolean noAmmo = false;
        boolean noUniversalAmmo = false;
        if(Utilities.validateString(this.ammoField.getText(), true)){
            if(this.ammoField.getText().isEmpty()){
                ammo = 0.0;
                noAmmo = true;
            }
            else{
                ammo = Double.parseDouble(this.ammoField.getText());
            }
            
        }
        else{
            JOptionPane.showMessageDialog((JFrame)this, "Invalid Ammo!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(Utilities.validateString(this.universalAmmoField.getText(), true)){
            if(this.universalAmmoField.getText().isEmpty()){
                universalAmmo = 0.0;
                noUniversalAmmo = true;
            }
            else{
                universalAmmo = Double.parseDouble(this.universalAmmoField.getText());
            }
        }
        else{
            JOptionPane.showMessageDialog((JFrame)this, "Invalid Universal Ammo!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(noUniversalAmmo && noAmmo){
            JOptionPane.showMessageDialog((JFrame)this, "No Ammo entered!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if(this.mobSelector.getItemCount() > 0 
                && Utilities.validateString(this.mobSelector.getSelectedItem().toString(), false) ){
            group = (String)this.mobSelector.getSelectedItem().toString();
        }
        else{
            JOptionPane.showMessageDialog((JFrame)this, "Invalid groupName!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String note = this.noteField.getText();
        String inventoryBefore = this.inventoryBeforeField.getText();
        String inventoryAfter = this.inventoryAfterField.getText();
        int result = JOptionPane.showConfirmDialog((JFrame)this, null, "Are you sure?", JOptionPane.YES_OPTION, JOptionPane.NO_OPTION);
        if(result == JOptionPane.YES_OPTION){
            Hunt hunt = new Hunt(ammo, universalAmmo, lootData, equipmentData, note, lootTracker.getMarkupHandler(), inventoryBefore, inventoryAfter);
            if(end){
                hunt.end(new Date());
                EquipmentUtilities.addEquipmentToSettingsFromData(lootTracker, equipmentData);
            }
            int runID = this.lootTracker.addHuntToGroup(group, hunt);
            this.lootTracker.addLootForGroup(group, hunt.getLoot());
            this.mainUI.addRunToDisplay(runID, group, hunt);
            this.setVisible(false);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewRunUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewRunUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewRunUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewRunUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEquipButton;
    private javax.swing.JButton addLootButton;
    private javax.swing.JPanel afterPanel;
    private javax.swing.JTextField ammoField;
    private javax.swing.JPanel ammoPanel;
    private javax.swing.JPanel beforePanel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JButton editButton;
    private javax.swing.JButton editLootButton;
    private javax.swing.JButton endRunButton;
    private javax.swing.JPanel equipmentPanel;
    private javax.swing.JTable equipmentTable;
    private javax.swing.JTextArea inventoryAfterField;
    private javax.swing.JTextArea inventoryBeforeField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JPanel lootPanel;
    private javax.swing.JTable lootTable;
    private javax.swing.JComboBox<String> mobSelector;
    private javax.swing.JButton newMobButton;
    private javax.swing.JTextArea noteField;
    private javax.swing.JPanel notePanel;
    private javax.swing.JButton removeEquipButton;
    private javax.swing.JButton removeLootButton;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JButton saveEquipButton;
    private javax.swing.JButton saveRunButton;
    private javax.swing.JTextField universalAmmoField;
    private javax.swing.JButton updateRunButton;
    // End of variables declaration//GEN-END:variables
}
